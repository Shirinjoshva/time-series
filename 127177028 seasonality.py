import matplotlib.pyplot as plt

def estimate_trend(y, d):
    n = len(y)
    trend = [0]*n
    for t in range(n):
        if d % 2 == 1:  # odd d
            sum_y = sum(y[max(0, t-d//2):min(n, t+d//2+1)])
            count = min(t+1, n-t, d)
        else:  # even d
            sum_y = sum(y[max(0, t-d//2+1):min(n, t+d//2+1)])
            count = min(t+1, n-t, d)
        trend[t] = sum_y / count
    return trend

def estimate_seasonality(y, d, trend):
    n = len(y)
    seasonality = [0]*n
    for t in range(n):
        seasonality[t] = y[t] / trend[t]
    return seasonality

y=[0.074796461,
0.058481604,
0.051195525,
0.057193469,
0.047600251,
0.038121052,
0.045907114,
0.10990103,
0.099496178,
0.1015003,
0.10337218,
0.12335518,
0.11609244,
0.34840718,
0.38941404,
0.30549258,
0.18408601,
0.15907308,
0.10582011,
0.081792332,
0.073281161,
0.17306013,
0.13838761,
0.1438922,
0.19283845,
0.17428471,
0.16787174,
0.53656471,
0.045984734,
0.035788968,
0.026414968,
0.028743504,
0.025225937,
0.024055867,
0.033345915,
0.073567286,
0.072930068,
0.073222026,
0.077986568,
0.083381042,
0.079233728,
0.2635068,
0.16186099,
0.14553057,
0.10016765,
0.10328438,
0.078407489,
0.052568238,
0.06323944,
0.14116105,
0.13766302,
0.15622617,
0.18052313,
0.19668658,
0.19117692,
0.70268995,
0.14108272,
0.061743159,
0.080124691,
0.088498123,
0.094542898,
0.066223137,
0.078709885,
0.15859231,
0.19497682,
0.21709628,
0.25920129,
0.29711977,
0.28631455,
1.0701884,
0.043288711,
0.036084425,
0.028568855,
0.032687064,
0.027654612,
0.023730461,
0.034806792,
0.084337093,
0.086497873,
0.096613638,
0.10916428,
0.12541798,
0.11911291,
0.37673,
0.080008425,
0.072605744,
0.039343651,
0.040964831,
0.034846663,
0.030413801,
0.03890885,
0.070014618,
0.06173107,
0.059217218,
0.050257683,
0.043371629,
0.03959522,
0.059128571,
0.070010252,
0.058406588,
0.040030278,
0.044795722,
0.040143874,
0.027501274,
0.033839568,
0.076674841,
0.085838273,
0.084908701,
0.098276712,
0.11319808,
0.1083475,
0.37528208,
0.068217687,
0.054782275,
0.037440598,
0.039733868,
0.032884579,
0.025865607,
0.028171564,
0.065823667,
0.06784299,
0.066370457,
0.072460845,
0.083117291,
0.079094619,
0.26395288,
0.20544127,
0.15429309,
0.13251667,
0.11240558,
0.086313061,
0.065220617,
0.069889516,
0.1522491,
0.16910143,
0.18159595,
0.18524386,
0.20296539,
0.19598998,
0.67287004,
0.18372892,
0.14330615,
0.10217156,
0.10022909,
0.078952193,
0.051380754,
0.065055206,
0.10139336,
0.12655696,
0.12666582,
0.12380737,
0.13784038,
0.12746689,
0.33365104,
0.032746509,
0.026720267,
0.023051063,
0.029770102,
0.026857069,
0.021939769,
0.025360871,
0.052693974,
0.055790771,
0.051608931,
0.052667521,
0.051195826,
0.048973713,
0.16742128,
0.15539651,
0.11292031,
0.072082855,
0.080567092,
0.061663989,
0.050264552,
0.050156612,
0.11454474,
0.098035902,
0.10237134,
0.10232347,
0.10623796,
0.099141963,
0.27767608,
0.25245032,
0.23135401,
0.1312020,
0.22033036,
0.13885725,
0.10067821,
0.11568516,
0.25838327,
0.29988003,
0.22292821,
0.25594738,
0.23797826,
0.22054686,
0.57876003,
0.087525748,
0.063367806,
0.060365301,
0.072400667,
0.048454113,
0.048731409,
0.056773189,
0.13081829,
0.15298924,
0.15507631,
0.18162276,
0.22262296,
0.21314597,
0.7299965,
0.35764888,
0.093283482,
0.19341797,
0.18742049,
0.21752688,
0.1201899,
0.13806757,
0.19833903,
0.23558204,
0.23031926,
0.18136624,
0.1372398,
0.12560003,
0.28052938,
0.14274319,
0.11876399,
0.10366764,
0.13911957,
0.10210196,
0.066327997,
0.0921437,
0.17920308,
0.15693152,
0.1727588,
0.16550814,
0.17894788,
0.16470161,
0.4543733,
0.16357346,
0.11724222,
0.1010005,
0.083759554,
0.067451969,
0.050724547,
0.057441175,
0.10389151,
0.097425215,
0.08788655,
0.09221746,
0.071652837,
0.067298383,
0.20039961,
0.12922114,
0.10659073,
0.075237885,
0.077337869,
0.066181153,
0.053943943,
0.061606612,
0.11785185,
0.11748801,
0.10428815,
0.092581533,
0.078596793,
0.073582262,
0.2187842,
0.2705172,
0.23838475,
0.17520083,
0.13742517,
0.1253943,
0.080034979,
0.097846583,
0.22895141,
0.2382651,
0.18791443,
0.24527013,
0.26491854,
0.25022325,
0.74658555,
0.1389581,
0.13799508,
0.098812141,
0.11320078,
0.087927692,
0.074307039,
0.082481012,
0.16845699,
0.1585584,
0.20968628,
0.19308425,
0.17481378,
0.16083059,
0.35497001,
0.033840656,
0.031590473,
0.025821246,
0.029574074,
0.027015423,
0.024604386,
0.03150494,
0.073945418,
0.072040655,
0.074183017,
0.080668606,
0.081628636,
0.076639712,
0.20756994,
0.10661447,
0.13039738,
0.098202817,
0.10363722,
0.078664146,
0.060692277,
0.067522623,
0.18472604,
0.17332263,
0.19533373,
0.22433163,
0.26089281,
0.25034627,
0.93143111,
0.10817923,
0.082821175,
0.06313093,
0.080704585,
0.064155631,
0.046947345,
0.056177985,
0.11188837,
0.13539557,
0.15501915,
0.18427032,
0.22226331,
0.21340171,
0.75609297,
0.094608143,
0.069849133,
0.057439465,
0.072810918,
0.066764377,
0.052748427,
0.069022767,
0.15770067,
0.1736926,
0.18365131,
0.20535925,
0.21017176,
0.19977191,
0.66961443,
0.081518456,
0.066284612,
0.050512403,
0.060726151,
0.053265568,
0.043794971,
0.054205284,
0.10717746,
0.096799605,
0.10186221,
0.08914914,
0.080793716,
0.074823759,
0.20092933,
0.1192174,
0.090842888,
0.058483742,
0.08003632,
0.066010639,
0.053030279,
0.070227355,
0.14262035,
0.13694037,
0.13580368,
0.10683552,
0.093777746,
0.088636197,
0.29098353,
0.16761678,
0.14884785,
0.099408306,
0.096450776,
0.071700938,
0.049187541,
0.049511231,
0.092352852,
0.089702591,
0.089052081,
0.090364754,
0.090260357,
0.086221635,
0.28964683,
0.13882139,
0.084527642,
0.081572756,
0.099478878,
0.078277014,
0.070160076,
0.081831433,
0.1884218,
0.21187142,
0.21973182,
0.27523226,
0.34167203,
0.3385863,
1.4656197,
0.096305959,
0.078367099,
0.054020099,
0.056383714,
0.040356699,
0.03096283,
0.030254826,
0.058760557,
0.059929144,
0.056867409,
0.052300096,
0.054522775,
0.051197216,
0.15023255,
0.16594231,
0.13668257,
0.10061327,
0.11142921,
0.076545455,
0.057325192,
0.055969711,
0.098947659,
0.10844816,
0.093691126,
0.1000482,
0.1319477,
0.12799281,
0.41794538,
0.17374158,
0.081703216,
0.090699248,
0.11122278,
0.087928869,
0.07375516,
0.070331335,
0.14950706,
0.15485221,
0.19224034,
0.20390804,
0.25153092,
0.23854701,
0.78600079,
0.12236728,
0.096527167,
0.067996569,
0.071241468,
0.059122566,
0.043815486,
0.047025144,
0.083380394,
0.082943864,
0.08901529,
0.086038277,
0.10325862,
0.097625889,
0.30314422,
0.046723999,
0.034308467,
0.026645066,
0.035267964,
0.033838604,
0.032317437,
0.053601939,
0.14553052,
0.15275161,
0.17827132,
0.19730563,
0.22881629,
0.22196968,
0.85645926,
0.12445744,
0.10514181,
0.068141334,
0.058711357,
0.045970891,
0.032704681,
0.038362429,
0.079316176,
0.087269671,
0.090420499,
0.10373248,
0.12050455,
0.11239956,
0.32941306,
0.031471845,
0.025566818,
0.019429279,
0.022530314]






 # Time series data
d = 7  # Number of seasons (odd)
# d = 10  # Number of seasons (even)

trend = estimate_trend(y, d)
seasonality = estimate_seasonality(y, d, trend)

# Plotting
plt.figure(figsize=(10, 6))

plt.subplot(3, 1, 1)
plt.plot(y, label='Original Time Series')
plt.legend()

plt.subplot(3, 1, 2)
plt.plot(trend, label='Trend Component')
plt.legend()

plt.subplot(3, 1, 3)
plt.plot(seasonality, label='Seasonality Component')
plt.legend()

plt.tight_layout()
plt.show()


0.7123273
